{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","record","state","mic","recordTxt","waveform","fft","open","then","console","log","connect","Tone","Master","setupPitch","setState","close","setInterval","waveData","getValue","max","Math","apply","min","r","fftValue","fs","context","sampleRate","N","_analyser","fftSize","fftMax","indexOf","data","i","length","push","name","floor","intensity","prevState","temp","waveMax","toFixed","Analyser","UserMedia","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAgJeA,G,kBAxIb,aAAe,IAAD,8BACZ,+CAaFC,OAAS,WAAO,IAAD,EACyB,EAAKC,MAAtCC,EADQ,EACRA,IAAKC,EADG,EACHA,UAAWC,EADR,EACQA,SAAUC,EADlB,EACkBA,IACb,WAAdF,GACFD,EAAII,OAAOC,MAAK,WACdC,QAAQC,IAAI,aACZD,QAAQC,IAAIP,GACZA,EAAIQ,QAAQL,GAAKK,QAAQN,GAAUM,QAAQC,IAAKC,QAChD,EAAKC,gBAEP,EAAKC,SAAS,CAACX,UAAW,WAE1BK,QAAQC,IAAI,cACZP,EAAIa,QACJ,EAAKD,SAAS,CAACX,UAAW,aA3BhB,EAiCdU,WAAa,WAAO,IAAD,EACK,EAAKZ,MAAtBG,EADY,EACZA,SAAUC,EADE,EACFA,IAYfW,aAAY,WACV,IAAIC,EAAWb,EAASc,WACpBC,EAAMC,KAAKD,IAAIE,MAAMD,KAAMH,GAC3BK,GAAsC,EAAhCF,KAAKE,IAAID,MAAMD,KAAMH,GAC3BM,EAAIH,KAAKD,IAAIA,EAAKG,IACtBC,GAAK,GACG,IAAa,IAANA,IACXA,EAAI,IAGR,IAAIC,EAAWnB,EAAIa,WAGnBC,EAAMC,KAAKD,IAAL,MAAAC,KAAI,YAAQI,IAUlB,IAPA,IAAIC,EAAKpB,EAAIqB,QAAQC,WACjBC,EAAIvB,EAAIwB,UAAUC,QAClBC,EAASP,EAASQ,QAAQb,GAAOM,EAAKG,EAItCK,EAAO,GACFC,EAAE,EAAGA,EAAEV,EAASW,OAAQD,IAC/BD,EAAKG,KAAK,CAACC,KAAMjB,KAAKkB,MAAMJ,EAAIT,EAAKG,GAAIW,UAAWf,EAASU,KAG/D1B,QAAQC,IAAIsB,EAAQR,GACpB,EAAKT,UAAS,SAAC0B,GAAD,MAAgB,CAC5BC,KAAMR,EACNF,OAAc,KAANR,EAAYiB,EAAUT,OAASX,KAAKkB,MAAMP,GAClDW,SAAY,GAAFnB,GAAMoB,QAAQ,SAMzB,MAjFH,EAAK1C,MAAQ,CACXI,IAAK,IAAIM,IAAKiC,SACdxC,SAAU,IAAIO,IAAKiC,SAAS,WAAY,IACxC1C,IAAK,IAAIS,IAAKkC,UACd1C,UAAW,SACXsC,KAAM,GACNV,OAAQ,EACRW,QAAS,GATC,E,sEAyFZ,OACA,6BACE,4BAAQI,QAASC,KAAK/C,QAAS+C,KAAK9C,MAAME,WAE1C,6BAAK,8BAAO4C,KAAK9C,MAAM8B,OAAlB,OACL,6BAAK,0CAAgBgB,KAAK9C,MAAMyC,c,GAhGpBM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.fcb76f4f.chunk.js","sourcesContent":["import React, {Component}  from 'react';\n//import { LineChart, Line, XAxis, YAxis } from 'recharts';\n//import logo from './logo.svg';\nimport Tone from 'tone';\nimport './App.css';\n\nclass App extends Component{\n  //state = {};\n  constructor() {\n    super();\n    this.state = {\n      fft: new Tone.Analyser(),\n      waveform: new Tone.Analyser('waveform', 32),\n      mic: new Tone.UserMedia(),\n      recordTxt: \"Record\",\n      temp: [],\n      fftMax: 0,\n      waveMax: 0,\n    };\n\n  }\n\n  record = () => {\n    let {mic, recordTxt, waveform, fft} = this.state;\n    if (recordTxt === \"Record\") {\n      mic.open().then(() => {\n        console.log('mic open!');\n        console.log(mic);\n        mic.connect(fft).connect(waveform).connect(Tone.Master);\n        this.setupPitch();\n      });\n      this.setState({recordTxt: \"Stop\"});\n    } else {\n      console.log('mic close!');\n      mic.close();\n      this.setState({recordTxt: \"Record\"});\n    }\n    \n    \n  }\n\n  setupPitch = () => {\n    let {waveform, fft} = this.state;\n\n   // mic.toMaster();\n    //PITCH\n    //var pitch1 = new Tone.PitchShift().toMaster();\n    //var pitch2 = new Tone.PitchShift().toMaster();\n    //Connect Mic to Pitches\n    //mic.connect(pitch1).connect(pitch2);\n    //Pitch1 and Pitch together with Mic create a Major Third Chord\n    //pitch1.pitch = 4; //one third up\n    //pitch2.pitch = -4; //one third down\n\n    setInterval(() => {\n      var waveData = waveform.getValue();\n      var max = Math.max.apply(Math, waveData);\n      var min = Math.min.apply(Math, waveData)*-1;\n      var r = Math.max(max, min);\n      r *= 7;\n      if (r < 0.2 && r !== 0) {\n          r = 0.2;\n      }\n\n      var fftValue = fft.getValue();\n      \n      //fftValue = fftValue.subarray(0, N/2 - 1);\n      max = Math.max(...fftValue);\n      //min = Math.min(...fftValue);\n      //var tempMax = max > -min ? max : min;\n      var fs = fft.context.sampleRate;\n      var N = fft._analyser.fftSize;\n      var fftMax = fftValue.indexOf(max) * fs / N;\n      \n      //console.log(fft.getValue());\n      //console.log(fft);\n      var data = [];\n      for (let i=0; i<fftValue.length; i++) {\n        data.push({name: Math.floor(i * fs / N), intensity: fftValue[i]});\n      }\n\n      console.log(fftMax, r);\n      this.setState((prevState) => ({\n        temp: data, \n        fftMax: r === 0.2 ? prevState.fftMax : Math.floor(fftMax),\n        waveMax: (r*10).toFixed(2)\n      }));\n\n\n      //console.log(mic.context);\n     //console.log(Tone.Master.volume.value);\n    }, 200)\n  }\n\n  render() {\n\n    //return <MyChart />;\n    return (\n    <div>\n      <button onClick={this.record}>{this.state.recordTxt}</button>\n      {/* <MyChart data={this.state.temp}></MyChart> */}\n      <br/><span>{this.state.fftMax} Hz</span>\n      <br/><span>volume : {this.state.waveMax}</span>\n    </div>\n    );\n  }\n\n  \n\n}\n\n\n// function MyChart(props) {\n  \n//   return (\n//     <LineChart width={1200} height={400} data={props.data}>\n//       <XAxis dataKey=\"name\" />\n//       <YAxis />\n//       <Line type=\"monotone\" dataKey=\"intensity\" stroke=\"#8884d8\" />\n//     </LineChart>\n//   )\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}